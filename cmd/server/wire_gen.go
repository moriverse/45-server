// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/moriverse/45-server/internal/infrastructure/config"
	"github.com/moriverse/45-server/internal/infrastructure/persistence"
	"github.com/moriverse/45-server/internal/infrastructure/web/middleware"
)

// Injectors from wire.go:

func InitializeApp(cfg config.Config) (*gin.Engine, error) {
	databaseConfig := cfg.Database
	db, err := persistence.NewDB(databaseConfig)
	if err != nil {
		return nil, err
	}
	engine := newRouter(db, cfg)
	return engine, nil
}

// wire.go:

func newRouter(db *persistence.DB, cfg config.Config) *gin.Engine {
	router := gin.Default()

	router.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{"message": "pong"})
	})

	v1 := router.Group("/api/v1")
	v1.Use(middleware.AuthMiddleware(cfg.JWT))
	{

	}

	return router
}
